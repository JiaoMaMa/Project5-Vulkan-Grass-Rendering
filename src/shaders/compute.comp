#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define GRAVITY -4.8
#define ORIENTATION_CULLING 1
#define VIEW_FRUSTRUM_CULLING 1
#define DISTANCE_CULLING 1

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer InputBlades {
    Blade inputBlades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;  
    uint firstInstance;
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
    Blade blade = inputBlades[gl_GlobalInvocationID.x];
    const vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    const vec3 up = blade.up.xyz;
    const float orientation = blade.v0.w;
    const float height = blade.v1.w;
    const float width = blade.v2.w;
    const float stiffness = blade.up.w;

    // Gravity
    const vec4 D = vec4(0.f, 1.f, 0.f, GRAVITY);
    const vec3 gE = normalize(D.xyz) * D.w;
    const vec3 orientationDir = vec3(cos(orientation), 0, sin(orientation));
    const vec3 f = normalize(cross(orientationDir, up));
    const vec3 gF = 0.25f * length(gE) * f;
    const vec3 g = gE + gF;

    // Recovery
    const vec3 iv2 = v0 + up * height;
    const vec3 r = (iv2 - v2) * stiffness;

    // Wind
    const vec3 wind = vec3(5.f, -2.f, 5.f) * 0.5f * (sin(0.5f * totalTime) + cos(0.25f * totalTime + 123.f) + 1.f);
    const float dirAlignment = 1.f - abs(dot(normalize(wind), normalize(v2 - v0)));
    const float hAlignment = dot(v2 - v0, up) / height;
    const vec3 w = wind * dirAlignment * hAlignment;
   

    // Apply TotalForce
    v2 += (g + r + w) * deltaTime;
    const float lproj = length(v2 - v0 - up * dot((v2 - v0), up));
    v1 = v0 + height * up * max(1.f - lproj / height, 0.05f * max(lproj / height, 1.f));
    // State Validation
    v2 = v2 - up * min(up * (v2 - v0), 0);
    const float L0 = distance(v2, v0);
    const float L1 = distance(v1, v0) + distance(v2, v1);
    const float L = (L0 + L1) / 2.f;
    const float ratio = height / L;
    v1 = v0 + ratio * (v1 - v0);
    v2 = v1 + ratio * (v2 - v1);

    blade.v1.xyz = v1.xyz;
    blade.v2.xyz = v2.xyz;
    inputBlades[gl_GlobalInvocationID.x] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    const uint idx = atomicAdd(numBlades.vertexCount, 1);
    culledBlades[idx] = inputBlades[gl_GlobalInvocationID.x];
}
